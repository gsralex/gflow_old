/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gsralex.gflow.pub.thriftgen.action;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-03-04")
public class TActionListResp implements org.apache.thrift.TBase<TActionListResp, TActionListResp._Fields>, java.io.Serializable, Cloneable, Comparable<TActionListResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TActionListResp");

  private static final org.apache.thrift.protocol.TField ACTION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("actionList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("cnt", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TActionListRespStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TActionListRespTupleSchemeFactory();

  public java.util.List<TAction> actionList; // required
  public int cnt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACTION_LIST((short)1, "actionList"),
    CNT((short)2, "cnt");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTION_LIST
          return ACTION_LIST;
        case 2: // CNT
          return CNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CNT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTION_LIST, new org.apache.thrift.meta_data.FieldMetaData("actionList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAction.class))));
    tmpMap.put(_Fields.CNT, new org.apache.thrift.meta_data.FieldMetaData("cnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TActionListResp.class, metaDataMap);
  }

  public TActionListResp() {
  }

  public TActionListResp(
    java.util.List<TAction> actionList,
    int cnt)
  {
    this();
    this.actionList = actionList;
    this.cnt = cnt;
    setCntIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TActionListResp(TActionListResp other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetActionList()) {
      java.util.List<TAction> __this__actionList = new java.util.ArrayList<TAction>(other.actionList.size());
      for (TAction other_element : other.actionList) {
        __this__actionList.add(new TAction(other_element));
      }
      this.actionList = __this__actionList;
    }
    this.cnt = other.cnt;
  }

  public TActionListResp deepCopy() {
    return new TActionListResp(this);
  }

  @Override
  public void clear() {
    this.actionList = null;
    setCntIsSet(false);
    this.cnt = 0;
  }

  public int getActionListSize() {
    return (this.actionList == null) ? 0 : this.actionList.size();
  }

  public java.util.Iterator<TAction> getActionListIterator() {
    return (this.actionList == null) ? null : this.actionList.iterator();
  }

  public void addToActionList(TAction elem) {
    if (this.actionList == null) {
      this.actionList = new java.util.ArrayList<TAction>();
    }
    this.actionList.add(elem);
  }

  public java.util.List<TAction> getActionList() {
    return this.actionList;
  }

  public TActionListResp setActionList(java.util.List<TAction> actionList) {
    this.actionList = actionList;
    return this;
  }

  public void unsetActionList() {
    this.actionList = null;
  }

  /** Returns true if field actionList is set (has been assigned a value) and false otherwise */
  public boolean isSetActionList() {
    return this.actionList != null;
  }

  public void setActionListIsSet(boolean value) {
    if (!value) {
      this.actionList = null;
    }
  }

  public int getCnt() {
    return this.cnt;
  }

  public TActionListResp setCnt(int cnt) {
    this.cnt = cnt;
    setCntIsSet(true);
    return this;
  }

  public void unsetCnt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CNT_ISSET_ID);
  }

  /** Returns true if field cnt is set (has been assigned a value) and false otherwise */
  public boolean isSetCnt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CNT_ISSET_ID);
  }

  public void setCntIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ACTION_LIST:
      if (value == null) {
        unsetActionList();
      } else {
        setActionList((java.util.List<TAction>)value);
      }
      break;

    case CNT:
      if (value == null) {
        unsetCnt();
      } else {
        setCnt((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTION_LIST:
      return getActionList();

    case CNT:
      return getCnt();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ACTION_LIST:
      return isSetActionList();
    case CNT:
      return isSetCnt();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TActionListResp)
      return this.equals((TActionListResp)that);
    return false;
  }

  public boolean equals(TActionListResp that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_actionList = true && this.isSetActionList();
    boolean that_present_actionList = true && that.isSetActionList();
    if (this_present_actionList || that_present_actionList) {
      if (!(this_present_actionList && that_present_actionList))
        return false;
      if (!this.actionList.equals(that.actionList))
        return false;
    }

    boolean this_present_cnt = true;
    boolean that_present_cnt = true;
    if (this_present_cnt || that_present_cnt) {
      if (!(this_present_cnt && that_present_cnt))
        return false;
      if (this.cnt != that.cnt)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetActionList()) ? 131071 : 524287);
    if (isSetActionList())
      hashCode = hashCode * 8191 + actionList.hashCode();

    hashCode = hashCode * 8191 + cnt;

    return hashCode;
  }

  @Override
  public int compareTo(TActionListResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetActionList()).compareTo(other.isSetActionList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionList, other.actionList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCnt()).compareTo(other.isSetCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnt, other.cnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TActionListResp(");
    boolean first = true;

    sb.append("actionList:");
    if (this.actionList == null) {
      sb.append("null");
    } else {
      sb.append(this.actionList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cnt:");
    sb.append(this.cnt);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TActionListRespStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TActionListRespStandardScheme getScheme() {
      return new TActionListRespStandardScheme();
    }
  }

  private static class TActionListRespStandardScheme extends org.apache.thrift.scheme.StandardScheme<TActionListResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TActionListResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.actionList = new java.util.ArrayList<TAction>(_list0.size);
                TAction _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TAction();
                  _elem1.read(iprot);
                  struct.actionList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setActionListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cnt = iprot.readI32();
              struct.setCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TActionListResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.actionList != null) {
        oprot.writeFieldBegin(ACTION_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.actionList.size()));
          for (TAction _iter3 : struct.actionList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CNT_FIELD_DESC);
      oprot.writeI32(struct.cnt);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TActionListRespTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TActionListRespTupleScheme getScheme() {
      return new TActionListRespTupleScheme();
    }
  }

  private static class TActionListRespTupleScheme extends org.apache.thrift.scheme.TupleScheme<TActionListResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TActionListResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetActionList()) {
        optionals.set(0);
      }
      if (struct.isSetCnt()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetActionList()) {
        {
          oprot.writeI32(struct.actionList.size());
          for (TAction _iter4 : struct.actionList)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetCnt()) {
        oprot.writeI32(struct.cnt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TActionListResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.actionList = new java.util.ArrayList<TAction>(_list5.size);
          TAction _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new TAction();
            _elem6.read(iprot);
            struct.actionList.add(_elem6);
          }
        }
        struct.setActionListIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cnt = iprot.readI32();
        struct.setCntIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

