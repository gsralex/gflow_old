/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gsralex.gflow.core.thriftgen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-21")
public class TJobResult implements org.apache.thrift.TBase<TJobResult, TJobResult._Fields>, java.io.Serializable, Cloneable, Comparable<TJobResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TJobResult");

  private static final org.apache.thrift.protocol.TField JOB_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("jobDesc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField OK_FIELD_DESC = new org.apache.thrift.protocol.TField("ok", org.apache.thrift.protocol.TType.BOOL, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TJobResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TJobResultTupleSchemeFactory();

  public TJobDesc jobDesc; // required
  public boolean ok; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    JOB_DESC((short)1, "jobDesc"),
    OK((short)2, "ok");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOB_DESC
          return JOB_DESC;
        case 2: // OK
          return OK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OK_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOB_DESC, new org.apache.thrift.meta_data.FieldMetaData("jobDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TJobDesc.class)));
    tmpMap.put(_Fields.OK, new org.apache.thrift.meta_data.FieldMetaData("ok", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TJobResult.class, metaDataMap);
  }

  public TJobResult() {
  }

  public TJobResult(
    TJobDesc jobDesc,
    boolean ok)
  {
    this();
    this.jobDesc = jobDesc;
    this.ok = ok;
    setOkIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TJobResult(TJobResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetJobDesc()) {
      this.jobDesc = new TJobDesc(other.jobDesc);
    }
    this.ok = other.ok;
  }

  public TJobResult deepCopy() {
    return new TJobResult(this);
  }

  @Override
  public void clear() {
    this.jobDesc = null;
    setOkIsSet(false);
    this.ok = false;
  }

  public TJobDesc getJobDesc() {
    return this.jobDesc;
  }

  public TJobResult setJobDesc(TJobDesc jobDesc) {
    this.jobDesc = jobDesc;
    return this;
  }

  public void unsetJobDesc() {
    this.jobDesc = null;
  }

  /** Returns true if field jobDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetJobDesc() {
    return this.jobDesc != null;
  }

  public void setJobDescIsSet(boolean value) {
    if (!value) {
      this.jobDesc = null;
    }
  }

  public boolean isOk() {
    return this.ok;
  }

  public TJobResult setOk(boolean ok) {
    this.ok = ok;
    setOkIsSet(true);
    return this;
  }

  public void unsetOk() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OK_ISSET_ID);
  }

  /** Returns true if field ok is set (has been assigned a value) and false otherwise */
  public boolean isSetOk() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OK_ISSET_ID);
  }

  public void setOkIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OK_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case JOB_DESC:
      if (value == null) {
        unsetJobDesc();
      } else {
        setJobDesc((TJobDesc)value);
      }
      break;

    case OK:
      if (value == null) {
        unsetOk();
      } else {
        setOk((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case JOB_DESC:
      return getJobDesc();

    case OK:
      return isOk();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case JOB_DESC:
      return isSetJobDesc();
    case OK:
      return isSetOk();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TJobResult)
      return this.equals((TJobResult)that);
    return false;
  }

  public boolean equals(TJobResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_jobDesc = true && this.isSetJobDesc();
    boolean that_present_jobDesc = true && that.isSetJobDesc();
    if (this_present_jobDesc || that_present_jobDesc) {
      if (!(this_present_jobDesc && that_present_jobDesc))
        return false;
      if (!this.jobDesc.equals(that.jobDesc))
        return false;
    }

    boolean this_present_ok = true;
    boolean that_present_ok = true;
    if (this_present_ok || that_present_ok) {
      if (!(this_present_ok && that_present_ok))
        return false;
      if (this.ok != that.ok)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetJobDesc()) ? 131071 : 524287);
    if (isSetJobDesc())
      hashCode = hashCode * 8191 + jobDesc.hashCode();

    hashCode = hashCode * 8191 + ((ok) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TJobResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetJobDesc()).compareTo(other.isSetJobDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobDesc, other.jobDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOk()).compareTo(other.isSetOk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ok, other.ok);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TJobResult(");
    boolean first = true;

    sb.append("jobDesc:");
    if (this.jobDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.jobDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ok:");
    sb.append(this.ok);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (jobDesc != null) {
      jobDesc.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TJobResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TJobResultStandardScheme getScheme() {
      return new TJobResultStandardScheme();
    }
  }

  private static class TJobResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<TJobResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TJobResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOB_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.jobDesc = new TJobDesc();
              struct.jobDesc.read(iprot);
              struct.setJobDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.ok = iprot.readBool();
              struct.setOkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TJobResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.jobDesc != null) {
        oprot.writeFieldBegin(JOB_DESC_FIELD_DESC);
        struct.jobDesc.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OK_FIELD_DESC);
      oprot.writeBool(struct.ok);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TJobResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TJobResultTupleScheme getScheme() {
      return new TJobResultTupleScheme();
    }
  }

  private static class TJobResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<TJobResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TJobResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetJobDesc()) {
        optionals.set(0);
      }
      if (struct.isSetOk()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetJobDesc()) {
        struct.jobDesc.write(oprot);
      }
      if (struct.isSetOk()) {
        oprot.writeBool(struct.ok);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TJobResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.jobDesc = new TJobDesc();
        struct.jobDesc.read(iprot);
        struct.setJobDescIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ok = iprot.readBool();
        struct.setOkIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

